{"name":"Android-iconics","tagline":"Android-Iconics is a library to use (almost) any alternative iconfont in your projects. It allows you to add any Android-Iconics compatible typeface-library-addon to your project and you are able to start using that font.","body":"#Android-Iconics  [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.mikepenz/iconics/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.mikepenz/iconics) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Android--Iconics-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1164)\r\n\r\nAndroid-Iconics is a library to use (almost) any alternative iconfont in your projects. It allows you to add any Android-Iconics compatible typeface-library-addon to your project and you are able to start using that font.\r\n\r\n*Fonts included by default:*\r\n- FontAwesome\r\n- Material Design Icons\r\n\r\n*Fonts available as addon:*\r\n- Meteocons\r\n- Octicons\r\n- Community Material Icons\r\n\r\n__ **UPGRADE FROM < 1.0.0:**\r\nThe package of the views was changed to `com.mikepenz.iconics.view.*`.\r\nChanged maven group. The group was changed from `com.mikepenz.iconics` to `com.mikepenz`. You can get all updates via the new one `compile 'com.mikepenz:iconics:1.0.1@aar'` (also check to update your typeface addon dependencies)\r\n\r\n\r\n__ **NOTE:** UPGRADE FROM < 0.7.5 Remove the `Google Material Design Icons` from your dependencies because it's now default and included within the main Android-Iconics package\r\n\r\nLet's start with some awesome screenshots ;)\r\n\r\n![Image](https://raw.githubusercontent.com/mikepenz/Android-Iconics/master/DEV/screenshots/screenshot_1_small.png)\r\n![Image](https://raw.githubusercontent.com/mikepenz/Android-Iconics/master/DEV/screenshots/screenshot_2_small.png)\r\n\r\n\r\n##Include in your project\r\nThe Android-Iconics Library is pushed to [Maven Central], so you just need to add the following dependency to your `build.gradle`.\r\n\r\n```javascript\r\ndependencies {\r\n\tcompile 'com.mikepenz:iconics:1.3.0@aar'\r\n}\r\n```\r\n\r\n##How to use\r\n\r\nUse it as Drawable anywhere. Create it like this:\r\n\r\n```java\r\nnew IconicsDrawable(this, FontAwesome.Icon.faw_android).color(Color.RED).sizeDp(24)\r\n```\r\n\r\nYou can use these icons in any IconicTextView just by defining the icon within the text. An example for FontAwesome looks like this: {faw-github}. You see pretty easy right?\r\n\r\nOr use it on any text by using the simple builder pattern. Here's the shortest possible sample:\r\n\r\n```java\r\nnew Iconics.IconicsBuilder().ctx(this).on(YOUR_TEXT_VIEW).build();\r\n```\r\nDefine icons in a text as following:\r\n```gson\r\nSome great text with a {faw-android} font awesome icon and {met-wind} meteocons icons.\r\n```\r\n\r\nThere are also custom views which allow you to use an Android-Iconics icon out of the box. \r\n\r\nIconicsImageView\r\n```xml\r\n<com.mikepenz.iconics.view.IconicsImageView\r\n        android:layout_width=\"72dp\"\r\n        android:layout_height=\"72dp\"\r\n        app:iiv_icon=\"gmd-favorite-outline\"\r\n        app:iiv_color=\"@android:color/holo_red_dark\"\r\n        />\r\n```\r\n\r\nIconicsTextView\r\n```xml\r\n<com.mikepenz.iconics.view.IconicsTextView\r\n        android:text=\"abc{hif-test}defgh{faw-adjust}ijk{fon-test1}lmnopqrstuv{fon-test2}wxyz\"\r\n        android:textColor=\"@android:color/black\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"56dp\"\r\n        android:textSize=\"16sp\"/>\r\n```\r\n\r\nIconicsButton\r\n```xml\r\n<com.mikepenz.iconics.view.IconicsButton\r\n        android:text=\"{faw-adjust} Button\"\r\n        android:layout_width=\"120dp\"\r\n        android:layout_height=\"60dp\"/>\r\n```\r\n\r\nFor more samples look at the source code of the sample.\r\n\r\n##Use typeface-library-addons\r\nOne basic function of this library is the feature to drop in new typefaces on the go. The default font of this project is FontAwesome (http://fontawesome.io), but you can create and add as many as you like.\r\n\r\nThe main idea is that the community can create libraries which can be used without the need of an extra library. \r\n\r\nSo how does it work?\r\nJust add the dependency of any and as many typface-library-addons in your build.gradle just beneath the android-iconics dependency.\r\n\r\n```javascript\r\ndependencies {\r\n\tcompile 'com.mikepenz:iconics:1.3.0@aar'\r\n\tcompile 'com.mikepenz:octicons-typeface:2.2.0@aar'\r\n\tcompile 'com.mikepenz:meteocons-typeface:1.1.1@aar'\r\n\tcompile 'com.mikepenz:community-material-typeface:1.0.0@aar'\r\n}\r\n```\r\n\r\nTo enable them for the IconicsTextView too follow the steps under [Register typeface](#register-typeface)\r\n\r\n##Advanced usage\r\n\r\n###working with multiple typeface-library-addons and icons\r\nIn some cases you will use multiple typefaces. It is really easy to decide which icon of which typeface-library-addon should be used. Each of those got a unique **3-character** long identifier which is the prefix of every single icon. \r\nFontAwesome - \"faw\"\r\nMeteocons - \"met\"\r\n\r\nEvertime you want to use an icon in a text just write {faw-adjust}, ...\r\n\r\n###Register typeface\r\nIn some cases you will love to use a typeface-library-addon in your IconicTextView and everywhere else without the need of adding it as typeface all the time.\r\n\r\nJust override your Application and register your additional fonts like this:\r\n```java\r\npublic class CustomApplication extends Application {\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        Iconics.registerFont(new Meteoconcs());\r\n        Iconics.registerFont(new Octicons());\r\n        Iconics.registerFont(new CommunityMaterial());\r\n        Iconics.registerFont(new CustomFont());\r\n    }\r\n}\r\n```\r\nand set it in your AndroidManifest.xml as name\r\n```java\r\n    <application\r\n        android:name=\"com.mikepenz.iconics.sample.CustomApplication\"\r\n        ...\r\n```\r\n\r\n###Advanced IconicsBuilder\r\nEverything is easy and simple. Right? But now you got a single icon within your textview and you need additional styling?\r\nJust define the style for all icons or only a specific one. You can find this in the PlaygroundActivity of the sample too.\r\n```java\r\nnew Iconics.IconicsBuilder().ctx(this)\r\n                .style(new ForegroundColorSpan(Color.WHITE), new BackgroundColorSpan(Color.BLACK), new RelativeSizeSpan(2f))\r\n                .styleFor(FontAwesome.Icon.faw_adjust, new BackgroundColorSpan(Color.RED))\r\n                .on(tv1)\r\n                .build();\r\n```\r\n\r\n###String icon-key or typeface enum\r\nSometimes you won't like to use the icon-key (\"faw-adjust\") like this, but use the enum provided by a specific font. Both is valid:\r\n```java\r\n  new IconicsDrawable(this, \"faw-adjust\").actionBarSize()\r\n```\r\n```java\r\n  new IconicsDrawable(this, FontAwesome.Icon.faw_adjust).sizeDp(24)\r\n```\r\n\r\n##Available fonts\r\n* [Fontawesome](http://fontawesome.io)\r\n  * \"faw\"\r\n  * DEFAULT\r\n* [Google Material Design Icons](https://github.com/google/material-design-icons)\r\n  * \"gmd\"\r\n  * DEFAULT\r\n* [Meteocons](http://www.alessioatzeni.com/meteocons/)\r\n  * \"met\"\r\n  * compile 'com.mikepenz.iconics:meteocons-typeface:+@aar'\r\n* [Octicons](https://github.com/github/octicons)\r\n  * \"oct\"\r\n  * compile 'com.mikepenz.iconics:octicons-typeface:+@aar'\r\n* [Community Material](http://materialdesignicons.com/)\r\n  * \"cmd\"\r\n  * compile 'com.mikepenz.iconics:community-material-typeface:+@aar'\r\n\r\n\r\n##Demo\r\nYou can try the sample application out. It's on Google Play ;)\r\nhttps://play.google.com/store/apps/details?id=com.mikepenz.iconics.sample\r\n\r\n##Contribute\r\nThe easiest way to contribute is by creating a new typeface-library addon. This is a pretty easy step. Just look into the meteocons-typeface-library project within this repository. You will see you only need 2 things. The font itself (the .ttf file). And the Typeface definition which is an implementation of the ITypeface class. \r\n\r\nJust fill in the required information, create the mapping and it works. To help the users using your typeface-library-addon you should upload it to maven and let me know so i can add it to the list of available fonts. \r\n\r\nSo the hardest part is to create the mapping. I also have a solution for this problem. \r\nJust use the awesome service of http://fontello.com/ create a typeface-library-addon of one of the provided fonts there or upload your own. If missing customize the names. Choose a good 3-character long prefix (css prefix under settings) and download the webfont. \r\nThis will include the .ttf to use, and a file called test-codes.css under css. This repository includes a small helper to create the enum-list for the Typeface definition class. (You can find it under /DEV/extractor). Just drop the test-codes.css in the same folder. rename it to test.css and run the extractor.js with node extractor.js. This will output the correct list.\r\n\r\nIf something is unclear, don't be afraid to drop an e-mail, or create an github issue.\r\n\r\n\r\n##Credits\r\n- [Joan Zapata](https://github.com/JoanZapata) He is the creator of [Android-Iconify](https://github.com/JoanZapata/android-iconify) which gave me the idea of this project. It implements some really great concepts, and i only tried to improve them and give it some more flexibility.\r\n\r\n\r\n#Developed By\r\n\r\n* Mike Penz - http://mikepenz.com - <mikepenz@gmail.com>\r\n\r\n\r\n#License\r\n\r\n    Copyright 2015 Mike Penz\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n","google":"UA-56332427-1","note":"Don't delete this file! It's used internally to help with page regeneration."}